/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cv.app.pharmacy.ui.setup;

import com.cv.app.common.Global;
import com.cv.app.pharmacy.database.controller.AbstractDataAccess;
import com.cv.app.pharmacy.database.entity.CustomerGroup;
import com.cv.app.pharmacy.database.entity.Location;
import com.cv.app.pharmacy.database.view.VLocationTraderMapping;
import com.cv.app.pharmacy.ui.common.LocationSupplierMappingTableModel;
import com.cv.app.util.BindingUtil;
import com.cv.app.util.Util1;
import java.util.List;
import javax.swing.RowFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.apache.log4j.Logger;

/**
 *
 * @author winswe
 */
public class LocationSupplierMappingSetup extends javax.swing.JPanel {

    static Logger log = Logger.getLogger(MachinePropSetup.class.getName());
    private final AbstractDataAccess dao = Global.dao;
    private final LocationSupplierMappingTableModel mappingTableModel = new LocationSupplierMappingTableModel();
    private boolean comboStatus = false;
    private TableRowSorter<TableModel> sorter;

    /**
     * Creates new form LocationItemMappingSetup
     */
    public LocationSupplierMappingSetup() {
        initComponents();
        try {
            dao.open();
            initCombo();
            initItemLocationTable();
            sorter = new TableRowSorter(tblMapping.getModel());
            tblMapping.setRowSorter(sorter);
            dao.close();
        } catch (Exception ex) {
            log.error("ItemSetup : " + ex.getStackTrace()[0].getLineNumber() + " - " + ex.toString());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initCombo() {
        BindingUtil.BindCombo(cboLocation, dao.findAll("Location"));
        BindingUtil.BindComboFilter(cboCusGroup, dao.findAllHSQL(
                "select o from CustomerGroup o where o.useFor = 'SUP' order by o.groupName"));
        comboStatus = true;
    }

    private void initItemLocationTable() {
        //Adjust table column width
        tblMapping.getColumnModel().getColumn(0).setPreferredWidth(30);
        tblMapping.getColumnModel().getColumn(1).setPreferredWidth(80);
        tblMapping.getColumnModel().getColumn(2).setPreferredWidth(40);
        tblMapping.getColumnModel().getColumn(3).setPreferredWidth(400);
        tblMapping.getColumnModel().getColumn(4).setPreferredWidth(10);
    }
    
    private RowFilter<Object, Object> startsWithFilter = new RowFilter<Object, Object>() {
        @Override
        public boolean include(RowFilter.Entry<? extends Object, ? extends Object> entry) {
            String str1 = Util1.getNullTo(entry.getStringValue(0), "").toUpperCase();
            String str2 = Util1.getNullTo(entry.getStringValue(1), "").toUpperCase();
            String str3 = Util1.getNullTo(entry.getStringValue(2), "").toUpperCase();
            String str4 = Util1.getNullTo(entry.getStringValue(3), "").toUpperCase();
            String filterText = txtFilter.getText().toUpperCase();

            return str1.startsWith(filterText) || str2.startsWith(filterText) || str3.startsWith(filterText)
                    || str4.startsWith(filterText);
        }
    };

    private void getItemLocationMapping() {
        String strSql = "select o from VLocationTraderMapping o where (o.key.locationId = "
                + ((Location) cboLocation.getSelectedItem()).getLocationId() + " "
                + "or o.key.locationId = -1) and o.traderType = 'S'";
        if (cboCusGroup.getSelectedItem() instanceof CustomerGroup) {
            String groupId = ((CustomerGroup) cboCusGroup.getSelectedItem()).getGroupId();
            strSql = strSql + " and o.groupId = '" + groupId + "'";
        }
        List<VLocationTraderMapping> tmpListVILM = dao.findAllHSQL(strSql);
        mappingTableModel.setlistVILM(tmpListVILM);

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cboLocation = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtFilter = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMapping = new javax.swing.JTable();
        cboCusGroup = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        butSelectAll = new javax.swing.JButton();
        butUnSelectAll = new javax.swing.JButton();

        jLabel1.setFont(Global.lableFont);
        jLabel1.setText("Location ");

        cboLocation.setFont(Global.textFont);
        cboLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboLocationActionPerformed(evt);
            }
        });

        jLabel2.setFont(Global.lableFont);
        jLabel2.setText("Filter ");

        txtFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFilterKeyReleased(evt);
            }
        });

        tblMapping.setFont(Global.textFont);
        tblMapping.setModel(mappingTableModel);
        tblMapping.setRowHeight(23);
        jScrollPane1.setViewportView(tblMapping);

        cboCusGroup.setFont(Global.textFont);
        cboCusGroup.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCusGroupItemStateChanged(evt);
            }
        });
        cboCusGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboCusGroupActionPerformed(evt);
            }
        });

        jLabel3.setFont(Global.lableFont);
        jLabel3.setText("Sup Group ");

        butSelectAll.setText("Select All");
        butSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSelectAllActionPerformed(evt);
            }
        });

        butUnSelectAll.setText("Un Select All");
        butUnSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butUnSelectAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboCusGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFilter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(butSelectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(butUnSelectAll)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboCusGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(butSelectAll)
                    .addComponent(butUnSelectAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cboLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboLocationActionPerformed
        if (comboStatus) {
            getItemLocationMapping();
        }
    }//GEN-LAST:event_cboLocationActionPerformed

    private void txtFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFilterKeyReleased
        if (txtFilter.getText().length() == 0) {
            sorter.setRowFilter(null);
        } else if (Util1.getPropValue("system.text.filter.method").equals("SW")) {
            sorter.setRowFilter(startsWithFilter);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter(txtFilter.getText()));
        }
    }//GEN-LAST:event_txtFilterKeyReleased

    private void cboCusGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboCusGroupActionPerformed
        if (comboStatus) {
            getItemLocationMapping();
        }
    }//GEN-LAST:event_cboCusGroupActionPerformed

    private void cboCusGroupItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCusGroupItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cboCusGroupItemStateChanged

    private void butSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSelectAllActionPerformed
        mappingTableModel.selectAll();
    }//GEN-LAST:event_butSelectAllActionPerformed

    private void butUnSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUnSelectAllActionPerformed
        mappingTableModel.unSelectAll();
    }//GEN-LAST:event_butUnSelectAllActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butSelectAll;
    private javax.swing.JButton butUnSelectAll;
    private javax.swing.JComboBox<String> cboCusGroup;
    private javax.swing.JComboBox<String> cboLocation;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblMapping;
    private javax.swing.JTextField txtFilter;
    // End of variables declaration//GEN-END:variables

}
