/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cv.app.pharmacy.ui.setup;

import com.cv.app.common.Global;
import com.cv.app.pharmacy.database.controller.AbstractDataAccess;
import com.cv.app.pharmacy.database.entity.ExchangeRate;
import com.cv.app.pharmacy.ui.common.ExchangeRateTableModel;
import com.cv.app.ui.common.TableDateTimeFieldRenderer;
import com.cv.app.ui.common.TableDecimalFieldRenderer;
import com.cv.app.util.DateUtil;
import com.cv.app.util.Util1;
import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Logger;

/**
 *
 * @author Hsu Pyae Sone
 */
public class ExchangeRateDialog extends javax.swing.JDialog {

    static Logger log = Logger.getLogger(ExchangeRateDialog.class.getName());
    private final ExchangeRateTableModel tableModel = new ExchangeRateTableModel();
    private final int mouseClick = 2;
    private final AbstractDataAccess dao = Global.dao;

    /**
     * Creates new form ExchangeRateDialog
     */
    public ExchangeRateDialog() {
        super(Util1.getParent(), true);
        initComponents();
        String strDate = DateUtil.getTodayDateStr();
        txtFrom.setText(strDate);
        txtTo.setText(strDate);
        tableModel.setParent(tblExchangeRate);
        initTable();
        getData();
    }

    private void getData() {
        try {
            List<ExchangeRate> listER = dao.findAllHSQL(
                    "select o from ExchangeRate o where date(o.createdDate) between '"
                    + DateUtil.toDateStrMYSQL(txtFrom.getText()) + "' and '"
                    + DateUtil.toDateStrMYSQL(txtTo.getText()) + "'"
            );
            if(listER == null){
                listER = new ArrayList();
            }
            tableModel.setListER(listER);
            tableModel.addNewRecord();
        } catch (Exception ex) {
            log.error("getData : " + ex.getMessage());
        } finally {
            dao.close();
        }
    }

    private void initTable(){
        tblExchangeRate.getColumnModel().getColumn(0).setPreferredWidth(50);//Date
        tblExchangeRate.getColumnModel().getColumn(1).setPreferredWidth(20);//From
        tblExchangeRate.getColumnModel().getColumn(2).setPreferredWidth(20);//To
        tblExchangeRate.getColumnModel().getColumn(3).setPreferredWidth(50);//Exchange Rate
        
        tblExchangeRate.getColumnModel().getColumn(0).setCellRenderer(new TableDateTimeFieldRenderer());
        tblExchangeRate.getColumnModel().getColumn(3).setCellRenderer(new TableDecimalFieldRenderer());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblExchangeRate = new javax.swing.JTable();
        txtFrom = new javax.swing.JFormattedTextField();
        txtTo = new javax.swing.JFormattedTextField();
        txtFilter = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Exchange Rate");

        tblExchangeRate.setModel(tableModel);
        tblExchangeRate.setRowHeight(23);
        jScrollPane1.setViewportView(tblExchangeRate);

        txtFrom.setEditable(false);
        txtFrom.setBorder(javax.swing.BorderFactory.createTitledBorder("From"));
        txtFrom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtFromMouseClicked(evt);
            }
        });

        txtTo.setEditable(false);
        txtTo.setBorder(javax.swing.BorderFactory.createTitledBorder("To"));
        txtTo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtToMouseClicked(evt);
            }
        });

        txtFilter.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFilter)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtFrom, txtTo});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFromMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtFromMouseClicked
        if (evt.getClickCount() == mouseClick) {
            String strDate = DateUtil.getDateDialogStr();
            if (strDate != null) {
                txtFrom.setText(strDate);
                getData();
            }
        }
    }//GEN-LAST:event_txtFromMouseClicked

    private void txtToMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtToMouseClicked
        if (evt.getClickCount() == mouseClick) {
            String strDate = DateUtil.getDateDialogStr();
            if (strDate != null) {
                txtTo.setText(strDate);
                getData();
            }
        }
    }//GEN-LAST:event_txtToMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblExchangeRate;
    private javax.swing.JTextField txtFilter;
    private javax.swing.JFormattedTextField txtFrom;
    private javax.swing.JFormattedTextField txtTo;
    // End of variables declaration//GEN-END:variables
}
